# Import necessary libraries
import pandas as pd  # For handling and manipulating data
from sklearn.model_selection import train_test_split  # To split data into training and testing sets
from sklearn.preprocessing import StandardScaler  # To normalize the data
from sklearn.linear_model import LogisticRegression  # Logistic Regression model
from sklearn.metrics import accuracy_score, classification_report  # For model evaluation
import joblib  # To save and load the trained model
# Step 1: Load the dataset from the given URL
url = "https://raw.githubusercontent.com/HackBio-Internship/2025_project_collection/refs/heads/main/Python/Dataset/diabetes.csv"
df = pd.read_csv(url)  # Load dataset into a Pandas DataFrame
# Step 2: Display dataset insights
print("First 5 rows of the dataset:")
print(df.head())  # Show the first 5 rows
print("\nDataset Info:")
print(df.info())  # Display dataset structure (columns, data types, non-null values)
print("\nChecking for missing values:")
print(df.isnull().sum())  # Verify if there are any missing values
print("\nStatistical Summary of the dataset:")
print(df.describe())  # Display key statistical details (mean, min, max, etc.)
# Step 3: Define features (X) and target variable (y)
X = df.iloc[:, :-1]  # Select all columns except the last one (features)
y = df.iloc[:, -1]   # Select the last column as the target (diabetes presence: 1 or 0)
# Step 4: Split data into training (80%) and testing (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 5: Standardize the feature values (Scaling)
scaler = StandardScaler()  # Initialize the StandardScaler
X_train_scaled = scaler.fit_transform(X_train)  # Fit and transform training data
X_test_scaled = scaler.transform(X_test)  # Transform test data using the same scaler
# Step 6: Train a logistic regression model
model = LogisticRegression(max_iter=200)  # Initialize Logistic Regression model
model.fit(X_train_scaled, y_train)  # Train the model using the training data
# Step 7: Make predictions on the test set
y_pred = model.predict(X_test_scaled)  # Predict diabetes status for test data
# Step 8: Evaluate model performance
accuracy = accuracy_score(y_test, y_pred)  # Compute accuracy score
print(f"\nModel Accuracy: {accuracy:.2f}")  # Display model accuracy
print("\nClassification Report:")
print(classification_report(y_test, y_pred))  # Show detailed classification metrics
# Step 9: Save the trained model
joblib.dump(model, 'diabetes_prediction_model.pkl')  # Save the trained model
print("\nModel successfully saved as 'diabetes_prediction_model.pkl'")



